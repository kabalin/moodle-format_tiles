{"version":3,"file":"course_mod_modal.min.js","sources":["../src/course_mod_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Javascript Module to handle rendering of course modules (e.g. resource/PDF, resource/html, page) in modal windows\n *\n * When the user clicks a PDF course module subtile or old style resource\n * if we are using modals for it (e.g. PDF) , create, populate, launch and size the modal\n *\n * @module      format_tiles/course_mod_modal\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since       Moodle 3.3\n */\n\ndefine([\"jquery\", \"core/modal_factory\", \"core/config\", \"core/templates\", \"core/notification\", \"core/ajax\", 'core/fragment'],\n    function ($, modalFactory, config, Templates, Notification, ajax, Fragment) {\n        \"use strict\";\n\n        /**\n         * Keep references for all modals we have already added to the page,\n         * so that we can relaunch then if needed\n         * @type {{}}\n         */\n        var modalStore = {};\n        var loadingIconHtml;\n        const win = $(window);\n        var courseId;\n\n        const Selector = {\n            completioncheckbox: \".completioncheckbox\",\n            completionAuto: \".completion-auto\",\n            modal: \".modal\",\n            modalDialog: \".modal-dialog\",\n            modalBody: \".modal-body\",\n            sectionMain: \".section.main\",\n            pageContent: \"#page-content\",\n            regionMain: \"#region-main\",\n            completionState: \"#completion-check-\",\n            cmModalClose: \".embed_cm_modal .close\",\n            cmModal: \".embed_cm_modal\",\n            moodleMediaPlayer: \".mediaplugin_videojs\",\n            urlModalLoadWarning: \"#embed-url-error-msg-\",\n            closeBtn: \"button.close\",\n            ACTIVITY: \"li.activity\",\n            URLACTIVITYPOPUPLINK: \".activity.modtype_url.urlpopup a\",\n            newWindowButton: \".button_expand\",\n            modalHeader: \".modal-header\",\n            embedModuleButtons: \".embed-module-buttons\",\n            iframe: \"iframe\"\n        };\n\n        const CLASS = {\n            COMPLETION_ENABLED: \"completion-enabled\",\n            COMPLETION_MANUAL: \"completion-manual\",\n            COMPLETION_AUTO: \"completion-auto\", // E.g. grade based.\n            COMPLETION_VIEW: \"completion-view\",\n            COMPLETION_CHECK_BOX: \"completioncheckbox\"\n        };\n\n        const LaunchModalDataActions = {\n            launchResourceModal: \"launch-tiles-resource-modal\",\n            launchModuleModal: \"launch-tiles-module-modal\",\n            launchUrlModal: \"launch-tiles-url-modal\"\n        };\n\n        const COMPLETION_TOGGLE_TYPES = {\n            MANUAL_NOT_DONE: \"manual:mark-done\",\n            MANUAL_DONE: \"manual:undo\"\n        };\n\n        const TOGGLE_MANUAL_COMPLETION = 'toggle-manual-completion';\n\n        var modalMinWidth = function () {\n            return Math.min(win.width(), 1100);\n        };\n\n        /**\n         * Some modals contain videos in iframes or objects, which need to stop playing when dismissed.\n         * @param {object} modal the modal which contains the video.\n         */\n        var stopAllVideosOnDismiss = function(modal) {\n            var iframes = modal.find(Selector.iframe);\n            if (iframes.length > 0) {\n                modal.find(Selector.closeBtn).click(function(e) {\n                    $(e.currentTarget).closest(Selector.cmModal).find(Selector.iframe).each(function (index, iframe) {\n                        iframe = $(iframe);\n                        iframe.attr('src', iframe.attr(\"src\"));\n                    });\n                });\n            }\n            var objects = modal.find(\"object\");\n            if (objects.length > 0) {\n                // In this case resetting the URL does not seem to work so we clear it and clear modal from storage.\n                modal.find(Selector.closeBtn).click(function(e) {\n                    var modal = $(e.currentTarget).closest(Selector.cmModal);\n                    modal.find(\"object\").each(function (index, object) {\n                        object = $(object);\n                        object.attr('data', \"\");\n                    });\n                    modalStore[modal.attr(\"data-cmid\")] = undefined;\n                });\n            }\n\n            var moodleMediaPlayer = modal.find(Selector.moodleMediaPlayer);\n            if (moodleMediaPlayer.length > 0) {\n                modal.find(Selector.closeBtn).click(function() {\n                    modal.find(Selector.moodleMediaPlayer).html(\"\");\n                });\n                // Ensure we create a new modal next time.\n                modalStore[modal.attr(\"data-cmid\")] = undefined;\n            }\n        };\n\n        /**\n         * Launch a Course Resource Modal if we have it already, or make one and launch e.g. for PDF\n         * @param {object} clickedCmObject the course module object which was clicked\n         * @returns {boolean} if successful or not\n         */\n        var launchCourseResourceModal = function (clickedCmObject) {\n            var cmid = clickedCmObject.attr(\"data-cmid\");\n            modalFactory.create({\n                type: modalFactory.types.DEFAULT,\n                title: clickedCmObject.attr(\"data-title\"),\n                body: loadingIconHtml\n            }).done(function (modal) {\n                modalStore[cmid] = modal;\n                modal.setLarge();\n                modal.show();\n                var modalRoot = $(modal.root);\n                modalRoot.attr(\"id\", \"embed_mod_modal_\" + cmid);\n                modalRoot.attr(\"data-cmid\", cmid);\n                modalRoot.attr(\"data-section\", clickedCmObject.closest(Selector.sectionMain).attr(\"data-section\"));\n                modalRoot.addClass(\"embed_cm_modal\");\n                const sectionNum = clickedCmObject.closest(Selector.sectionMain).attr(\"data-section\");\n                // Render the modal body and set it to the page.\n                // First a blank template data object.\n                var templateData = {\n                    id: cmid,\n                    pluginfileUrl: clickedCmObject.attr(\"data-url\"),\n                    objectType: \"text/html\",\n                    width: \"100%\",\n                    height: Math.round(win.height() - 60), // Embedded object height in modal - make as high as poss.\n                    cmid: cmid,\n                    tileid: sectionNum,\n                    isediting: 0,\n                    sesskey: config.sesskey,\n                    activityname: clickedCmObject.attr(\"data-title\"),\n                    config: {wwwroot: config.wwwroot},\n                    showDownload: 0,\n                    showNewWindow: 0,\n                    hascompletion: 0,\n                    completionstring: ''\n                };\n                // If it's a PDF in this modal, change from the defaults assigned above.\n                if (clickedCmObject.attr('data-modtype') === \"resource_pdf\") {\n                    templateData.objectType = 'application/pdf';\n                }\n\n                Templates.render(\"format_tiles/embed_file_modal_body\", templateData).done(function (html) {\n                    modal.setBody(html);\n                    modalRoot.find(Selector.modalBody).animate({\"min-height\": Math.round(win.height() - 60)}, \"fast\");\n\n                    if (clickedCmObject.attr('data-modtype') === \"resource_html\") {\n                        // HTML files only - set widths to 100% since they may contain embedded videos etc.\n                        modalRoot.find(Selector.modal).animate({\"max-width\": \"100%\"}, \"fast\");\n                        modalRoot.find(Selector.modalDialog).animate({\"max-width\": \"100%\"}, \"fast\");\n                        modalRoot.find(Selector.modalBody).animate({\"max-width\": \"100%\"}, \"fast\");\n                        stopAllVideosOnDismiss(modalRoot);\n                    } else {\n                        // Otherwise (e.g for PDF) we don't need 100% width.\n                        modalRoot.find(Selector.modal).animate({\"max-width\": modalMinWidth()}, \"fast\");\n                        // We do modal-dialog too since Moove theme uses it.\n                        modalRoot.find(Selector.modalDialog).animate({\"max-width\": modalMinWidth()}, \"fast\");\n                    }\n\n                }).fail(Notification.exception);\n                // Render the modal header / title and set it to the page.\n                renderModalHeader(clickedCmObject, modalRoot, templateData.pluginfileUrl, true, true);\n\n                return true;\n            });\n            return false;\n        };\n\n        /**\n         * Launch an embedded URL Modal (URL displays in iframe) if we have it already, or make one and launch.\n         * This is only used if the URL activity is set to Display: embed.  The reason is that most websites disallow iframes.\n         * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options.\n         * @param {object} clickedCmObject the course module object which was clicked\n         * @returns {boolean} if successful or not\n         */\n        var launchEmbeddedUrlModal = function (clickedCmObject) {\n            var cmid = clickedCmObject.attr(\"data-cmid\");\n            modalFactory.create({\n                type: modalFactory.types.DEFAULT,\n                title: clickedCmObject.attr(\"data-title\"),\n                body: loadingIconHtml\n            }).done(function (modal) {\n                modalStore[cmid] = modal;\n                modal.setLarge();\n                modal.show();\n                var modalRoot = $(modal.root);\n                modalRoot.attr(\"id\", \"embed_mod_modal_\" + cmid);\n                modalRoot.attr(\"data-cmid\", cmid);\n                modalRoot.attr(\"data-section\", clickedCmObject.closest(Selector.sectionMain).attr(\"data-section\"));\n                modalRoot.addClass(\"embed_cm_modal\");\n\n                // Render the modal body and set it to the page.\n                // First a blank template data object.\n\n                var modalWidth = Math.round(win.width() * 0.9);\n                var modalHeight = Math.round(win.height() * 0.9);\n                const sectionNum = clickedCmObject.closest(Selector.sectionMain).attr(\"data-section\");\n                var templateData = {\n                    id: cmid,\n                    pluginfileUrl: clickedCmObject.attr(\"data-url\"),\n                    objectType: \"text/html\",\n                    width: modalWidth - 30,\n                    height: modalHeight - 30,\n                    cmid: cmid,\n                    tileid: sectionNum,\n                    isediting: 0,\n                    sesskey: config.sesskey,\n                    activityname: clickedCmObject.attr(\"data-title\"),\n                    config: {wwwroot: config.wwwroot},\n                    secondaryurl: clickedCmObject.closest(Selector.ACTIVITY).attr(\"data-url-secondary\")\n                };\n\n                Templates.render(\"format_tiles/embed_url_modal_body\", templateData).done(function (html) {\n                    modal.setBody(html);\n                    modalRoot.find(Selector.modalBody).animate({\"min-height\": modalHeight}, \"fast\");\n                    modalRoot.find(Selector.modal).animate({\"max-width\": modalWidth}, \"fast\");\n                    modalRoot.find(Selector.modalDialog).animate({\"max-width\": modalWidth}, \"fast\");\n                    modalRoot.find(Selector.modalBody).animate({\"max-width\": modalWidth}, \"fast\");\n                    stopAllVideosOnDismiss(modalRoot);\n                    modalRoot.find(Selector.modalBody).addClass(\"text-center\");\n                }).fail(Notification.exception);\n                // Render the modal header / title and set it to the page.\n                renderModalHeader(clickedCmObject, modalRoot, templateData.pluginfileUrl, false, true);\n\n                // Listen to see if user clicks to view the modal contents in a new window.  Dismiss modal if so.\n                // Important for video which may end up playing twice otherwise.\n                setTimeout(function() {\n                    modalRoot.find(Selector.newWindowButton).click(function() {\n                        modalStore[modalRoot.attr(\"data-cmid\")].hide();\n                        modalStore[modalRoot.attr(\"data-cmid\")] = undefined;\n                        modalRoot.remove();\n                        $(\".modal-backdrop\").not(\"#window-overlay\").removeClass(\"show\").addClass(\"hide\");\n                    });\n                }, 1000);\n\n                return true;\n            });\n            return false;\n        };\n\n        /**\n         * Resize the modal to account for its content.\n         * @param {object} modalRoot\n         */\n        var resizeModal = function(modalRoot) {\n            modalRoot.find(Selector.modal).animate({\"max-width\": modalMinWidth()}, \"fast\");\n\n            var MODAL_MARGIN = 70;\n\n            // If the modal contains a Moodle mediaplayer div, remove the max width css rule which Moodle applies.\n            // Otherwise video will be 400px max wide.\n            var mediaPlayer = $(Selector.moodleMediaPlayer);\n            mediaPlayer.find(\"div\").each(function(index, child) {\n                $(child).css(\"max-width\", \"\");\n            });\n            if (mediaPlayer.length > 0) {\n                stopAllVideosOnDismiss(modalRoot);\n            }\n\n            // If the activity contains an iframe (e.g. is a page with a YouTube video in it, or H5P), ensure modal is big enough.\n            // Do this for every iframe in the course module.\n            modalRoot.find(Selector.iframe).each(function (index, iframe) {\n\n                // Get the modal.\n                var modal;\n                // Boost calls the modal \"modal dialog\" so try this first.\n                modal = modalRoot.find(Selector.modalDialog);\n\n                // If no luck, try what Clean and Adaptable do instead.\n                if (modal.length === 0) {\n                    modal = modalRoot.find(Selector.modal);\n                }\n\n                // Now check and adjust the width of the modal.\n                var iframeWidth = Math.min($(iframe).width(), win.width());\n                if (iframeWidth > modal.width() - MODAL_MARGIN) {\n                    modal.animate(\n                        {\"max-width\": Math.max(iframeWidth + MODAL_MARGIN, modalMinWidth())},\n                        \"fast\"\n                    );\n                    modalRoot.find(Selector.modal).animate(\n                        {\"max-width\": Math.max(iframeWidth + MODAL_MARGIN, modalMinWidth())},\n                        \"fast\"\n                    );\n                }\n\n                // Then the height of the modal body.\n                var iframeHeight = Math.min($(iframe).height(), win.height());\n                var modalBody = modalRoot.find(Selector.modalBody);\n                if (iframeHeight > modalBody.height() - MODAL_MARGIN) {\n                    modalBody.animate({\"min-height\": Math.min(iframeHeight + MODAL_MARGIN, win.height()) + 1}, \"fast\");\n                }\n                stopAllVideosOnDismiss(modalRoot);\n            });\n        };\n\n        /**\n         * Check the modal height to see if the iframe in it is bigger.  If it is, adjust modal height up.\n         * Do this a few times so that, if iframe content is loading, we can check after it's loaded.\n         * @param {object} modalRoot\n         * @param {number} howManyChecks\n         * @param {number}duration\n         * @param {number} oldHeight\n         */\n        const modalHeightChangeWatcher = function (modalRoot, howManyChecks, duration, oldHeight = 0) {\n            const iframe = modalRoot.find(Selector.modalBody);\n            if (iframe) {\n                const newHeight = Math.round(iframe.height());\n                if (newHeight && newHeight > oldHeight + 10) {\n                    resizeModal(modalRoot);\n                }\n                if (howManyChecks > 0) {\n                    setTimeout(() => {\n                        modalHeightChangeWatcher(modalRoot, howManyChecks - 1, duration, newHeight);\n                    }, duration);\n                }\n            }\n        };\n\n        /**\n         * Handle rendering the items to go into course module modal header.\n         * @param {object} clickedCmObject\n         * @param {object} modalRoot\n         * @param {string} pluginfileUrl\n         * @param {boolean} showDownload\n         * @param {boolean} showNewWindow\n         */\n        const renderModalHeader = function(clickedCmObject, modalRoot, pluginfileUrl, showDownload, showNewWindow) {\n            const sectionNum = clickedCmObject.closest(Selector.sectionMain).attr(\"data-section\");\n            const cmid = clickedCmObject.attr(\"data-cmid\");\n            var templateData = {\n                cmid: cmid,\n                activityname: clickedCmObject.attr(\"data-title\"),\n                tileid: sectionNum\n            };\n            if (clickedCmObject.hasClass(CLASS.COMPLETION_ENABLED)) {\n                templateData.istrackeduser = 1;\n                templateData.hascompletion = 1;\n                const oldState = clickedCmObject.attr('data-completion-state') === \"1\";\n                templateData.overallcomplete = oldState ? 1 : 0;\n                templateData.overallincomplete = oldState ? 0 : 1;\n                templateData.completionIsManual = clickedCmObject.hasClass(CLASS.COMPLETION_MANUAL);\n                if (templateData.completionIsManual) {\n                    clickedCmObject.attr(\n                        TOGGLE_MANUAL_COMPLETION,\n                        templateData.overallcomplete\n                            ? COMPLETION_TOGGLE_TYPES.MANUAL_DONE : COMPLETION_TOGGLE_TYPES.MANUAL_NOT_DONE\n                    );\n                } else {\n                    // Auto completion has different vars for core template core_course/completion_automatic.\n                    templateData.statuscomplete = templateData.overallcomplete;\n                    templateData.statusincomplete = templateData.overallincomplete;\n                }\n                templateData.showDownload = showDownload !== undefined ? showDownload : 0;\n                templateData.showNewWindow = showNewWindow !== undefined ? showNewWindow : 0;\n                templateData.pluginfileUrl = pluginfileUrl;\n                templateData.forModal = true;\n                // Trigger event to check if other items in course have updated availability.\n                if (oldState !== templateData.completionstate) {\n                    require([\"format_tiles/completion\"], function (completion) {\n                        completion.triggerCompletionChangedEvent(parseInt(sectionNum), parseInt(clickedCmObject.attr(\"data-cmid\")));\n                    });\n                }\n            }\n            Templates.render(\"format_tiles/embed_module_modal_header_btns\", templateData).done(function (html) {\n                modalRoot.find(Selector.embedModuleButtons).remove();\n                modalRoot.find($('button.close')).remove();\n                modalRoot.find(Selector.modalHeader).append(html);\n                modalRoot.find(Selector.closeBtn).detach().appendTo(modalRoot.find(Selector.embedModuleButtons));\n                const toggleCompletionSelector = '[data-action=\"' + TOGGLE_MANUAL_COMPLETION + '\"]';\n                modalRoot.find(toggleCompletionSelector).on('click', () => {\n                    require([\"format_tiles/completion\"], function (completion) {\n                        // In this case, core will handle the request to set the new completion value in the DB.\n                        // We wait a moment to allow that to get a head start.\n                        // Then we trigger an event which course.js will see and update the section content to show new statuses.\n                        // Use will not notice this as they are looking at the modal, but it's ready when they dismiss modal.\n                        setTimeout(() => {\n                            completion.triggerCompletionChangedEvent(\n                                parseInt(modalRoot.attr('data-section')), parseInt(modalRoot.attr(\"data-cmid\"))\n                            );\n                        }, 300);\n                    });\n                });\n            }).fail(Notification.exception);\n\n            // Allow a short delay before we resize the modal, and check a few times, as content may be loading.\n            setTimeout(() => {\n                modalHeightChangeWatcher(modalRoot, 3, 1000);\n            }, 500);\n        };\n\n        // TODO refactor these to avoid repetition.\n        /**\n         * Launch a Course activity Modal if we have it already, or make one and launch e.g. for \"Page\"\n         * @param {object} clickedCmObject the course module object which was clicked\n         * @returns {boolean} if successful or not\n         */\n        var launchCourseActivityModal = function (clickedCmObject) {\n            var cmid = clickedCmObject.data('cmid');\n            var moduleContextId = clickedCmObject.data('contextid');\n            // TODO code envisages potentially adding in other web services for other mod types, but for now we have page only.\n            var fragmentName = \"get_mod_\" + clickedCmObject.data('modtype');\n            var modalRoot;\n\n            modalFactory.create({\n                type: modalFactory.types.DEFAULT,\n                title: clickedCmObject.data('title'),\n                body: loadingIconHtml\n            }).then(function (modal) {\n                modalStore[cmid] = modal;\n                modal.setLarge();\n                modal.show();\n                modalRoot = $(modal.root);\n                modalRoot.attr(\"data-cmid\", cmid);\n                modalRoot.attr(\"data-section\", clickedCmObject.closest(Selector.sectionMain).attr(\"data-section\"));\n                modalRoot.attr(\"id\", \"embed_mod_modal_\" + cmid);\n                modalRoot.addClass(\"embed_cm_modal\");\n                modalRoot.addClass('mod_' + clickedCmObject.data('modtype'));\n                stopAllVideosOnDismiss(modalRoot);\n                return Fragment.loadFragment('format_tiles', fragmentName, moduleContextId, {});\n            }).then(function(html, js) {\n                renderModalHeader(clickedCmObject, modalRoot, '', false, false);\n                modalStore[cmid].setBody(html);\n                Templates.runTemplateJS(js);\n                return true;\n            }).fail(function(ex) {\n                if (config.developerdebug !== true) {\n                    // Load the activity using PHP instead.\n                    window.location = config.wwwroot + \"/mod/\" + clickedCmObject.attr(\"data-modtype\") + \"/view.php?id=\" + cmid;\n                } else {\n                    Notification.exception(ex);\n                }\n            });\n            return false;\n        };\n\n        /**\n         * If a URL activity is clicked and it's been set to open in \"Pop up\" then launch a browser pop up.\n         * @param {object} e\n         */\n        var launchUrlPopUp = function (e) {\n            var clickedActivity = $(e.currentTarget).closest(Selector.ACTIVITY);\n            if (clickedActivity.attr(\"data-url\") !== undefined) {\n                e.stopPropagation();\n                e.preventDefault();\n                // Log the fact we viewed it.\n                ajax.call([{\n                    methodname: \"format_tiles_log_mod_view\", args: {\n                        courseid: courseId,\n                        cmid: clickedActivity.attr(\"data-cmid\")\n                    }\n                }])[0].done(function () {\n                    // Because we intercepted the normal event for the click, process auto completion.\n                    const sectionNum = clickedActivity.closest(Selector.section).attr('data-section');\n                    const cmid = clickedActivity.attr('data-cmid');\n                    require([\"format_tiles/completion\"], function (completion) {\n                        completion.triggerCompletionChangedEvent(\n                            sectionNum ? parseInt(sectionNum) : 0,\n                            cmid ? parseInt(cmid) : 0\n                        );\n                    });\n                    // Then open the pop up.\n                    window.open(clickedActivity.attr(\"data-url\"));\n                }).fail(Notification.exception);\n            }\n        };\n\n        return {\n            init: function (courseIdInit, isEditing) {\n                courseId = courseIdInit;\n                $(document).ready(function () {\n                    var modalSelectors = Object.keys(LaunchModalDataActions).map(function (key) {\n                        return '[data-action=\"' + LaunchModalDataActions[key] + '\"]';\n                    }).join(\", \");\n\n                    var pageContent = $(Selector.pageContent);\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(Selector.regionMain);\n                    }\n                    pageContent.on(\"click\", modalSelectors, function (e) {\n                        // If click is on a completion checkbox within activity, ignore here as handled elsewhere.\n                        const tgt = $(e.target);\n                        if (tgt.hasClass(CLASS.COMPLETION_CHECK_BOX) || tgt.parent().hasClass(CLASS.COMPLETION_CHECK_BOX)) {\n                            return;\n                        }\n                        e.preventDefault();\n                        const currTgt = $(e.currentTarget);\n                        var clickedCmObject = currTgt.closest(\"li.activity\");\n                        if (clickedCmObject.hasClass('completeonview')) {\n                            const sectionNum = clickedCmObject.closest(Selector.sectionMain).attr('data-section');\n                            const cmid = clickedCmObject.attr('data-cmid');\n                            require([\"format_tiles/completion\"], function (completion) {\n                                completion.triggerCompletionChangedEvent(\n                                    sectionNum ? parseInt(sectionNum) : 0,\n                                    cmid ? parseInt(cmid) : 0\n                                );\n                            });\n                        }\n                        // If we already have this modal on the page, launch it.\n                        var existingModal = modalStore[clickedCmObject.attr(\"data-cmid\")];\n                        if (typeof existingModal === \"object\") {\n                            existingModal.show();\n                        } else {\n                            // Log the fact we viewed it (only do this once not every time the modal launches).\n                            ajax.call([{\n                                methodname: \"format_tiles_log_mod_view\", args: {\n                                    courseid: courseId,\n                                    cmid: clickedCmObject.attr(\"data-cmid\")\n                                }\n                            }])[0].fail(Notification.exception);\n\n                            // We don't already have it, so make it.\n                            switch (currTgt.attr(\"data-action\")) {\n                                case LaunchModalDataActions.launchModuleModal:\n                                    launchCourseActivityModal(clickedCmObject);\n                                    break;\n                                case LaunchModalDataActions.launchResourceModal:\n                                    launchCourseResourceModal(clickedCmObject);\n                                    break;\n                                case LaunchModalDataActions.launchUrlModal:\n                                    launchEmbeddedUrlModal(clickedCmObject);\n                                    break;\n                                default:\n                                    throw new Error(\"Unknown modal type \" + currTgt.attr(\"data-action\"));\n                            }\n                        }\n                        // If we have an auto completion toggle on this item, trigger event.\n                        if (clickedCmObject.find(Selector.completionAuto).length !== 0) {\n                            const sectionNum = clickedCmObject.closest(Selector.sectionMain).attr('data-section');\n                            const cmid = clickedCmObject.attr('data-cmid');\n                            require([\"format_tiles/completion\"], function (completion) {\n                                completion.triggerCompletionChangedEvent(\n                                    sectionNum ? parseInt(sectionNum) : 0,\n                                    cmid ? parseInt(cmid) : 0\n                                );\n                            });\n                        }\n                    });\n\n                     // Render the loading icon and append it to body so that we can use it later.\n                    Templates.render(\"format_tiles/loading\", {})\n                        .catch(Notification.exception)\n                        .done(function (html) {\n                            loadingIconHtml = html; // TODO get this from elsewhere.\n                        }).fail(Notification.exception);\n\n                    if (!isEditing) {\n                        // If a URL activity is clicked and it's been set to open in \"Pop up\" then launch a browser pop up.\n                        pageContent.on(\"click\", Selector.URLACTIVITYPOPUPLINK, function(e) {\n                            launchUrlPopUp(e);\n                        });\n                    }\n\n                    // If completion of a cm changes, remove it from store so that it can be re-rendered with correct heading.\n                    $(document).on('format-tiles-completion-changed', function(e, data) {\n                        if (data.cmid && modalStore[data.cmid]) {\n                            modalStore[data.cmid] = undefined;\n                        }\n                    });\n                });\n            }\n        };\n    }\n);\n"],"names":["define","$","modalFactory","config","Templates","Notification","ajax","Fragment","loadingIconHtml","modalStore","win","window","courseId","Selector","completioncheckbox","completionAuto","modal","modalDialog","modalBody","sectionMain","pageContent","regionMain","completionState","cmModalClose","cmModal","moodleMediaPlayer","urlModalLoadWarning","closeBtn","ACTIVITY","URLACTIVITYPOPUPLINK","newWindowButton","modalHeader","embedModuleButtons","iframe","CLASS","LaunchModalDataActions","launchResourceModal","launchModuleModal","launchUrlModal","COMPLETION_TOGGLE_TYPES","modalMinWidth","Math","min","width","stopAllVideosOnDismiss","find","length","click","e","currentTarget","closest","each","index","attr","object","undefined","html","resizeModal","modalRoot","animate","mediaPlayer","child","css","iframeWidth","max","iframeHeight","height","modalHeightChangeWatcher","howManyChecks","duration","oldHeight","newHeight","round","setTimeout","renderModalHeader","clickedCmObject","pluginfileUrl","showDownload","showNewWindow","sectionNum","templateData","cmid","activityname","tileid","hasClass","istrackeduser","hascompletion","oldState","overallcomplete","overallincomplete","completionIsManual","statuscomplete","statusincomplete","forModal","completionstate","require","completion","triggerCompletionChangedEvent","parseInt","render","done","remove","append","detach","appendTo","on","fail","exception","init","courseIdInit","isEditing","document","ready","modalSelectors","Object","keys","map","key","join","tgt","target","parent","preventDefault","currTgt","existingModal","show","call","methodname","args","courseid","data","moduleContextId","fragmentName","create","type","types","DEFAULT","title","body","then","setLarge","root","addClass","loadFragment","js","setBody","runTemplateJS","ex","developerdebug","location","wwwroot","launchCourseActivityModal","id","objectType","isediting","sesskey","completionstring","launchCourseResourceModal","modalWidth","modalHeight","secondaryurl","hide","not","removeClass","launchEmbeddedUrlModal","Error","catch","clickedActivity","stopPropagation","section","open","launchUrlPopUp"],"mappings":"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"}
{"version":3,"file":"course.min.js","sources":["../src/course.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Main Javascript module for format_tiles for when user is *NOT* editing.\n * See course_edit for if they are editing.\n * Handles the UI changes when tiles are selected and anything else not\n * covered by the specific modules\n *\n * @module      format_tiles/course\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/ajax\", \"format_tiles/browser_storage\",\n        \"core/notification\", \"core/str\", \"format_tiles/tile_fitter\", 'core/fragment'],\n    function ($, Templates, ajax, browserStorage, Notification, str, tileFitter, Fragment) {\n        \"use strict\";\n\n        var isMobile;\n        var loadingIconHtml;\n        var stringStore = [];\n        var scrollFuncLock = false;\n        var sectionIsOpen = false;\n        var HEADER_BAR_HEIGHT = 60; // This varies by theme and version so will be reset once pages loads below.\n        var reopenLastVisitedSection = false;\n        var courseId;\n        var courseContextId;\n        var resizeLocked = false;\n        var enableCompletion;\n\n         // Keep a record of which tile is currently open.\n        var openTile = 0;\n\n        var Selector = {\n            BODY: \"body\",\n            PAGE: \"#page\",\n            TILE: \".tile\",\n            TILEID: \"#tile-\",\n            MOVEABLE_SECTION: \".moveablesection\",\n            FILTER_BUTTON: \".filterbutton\",\n            TILE_LOADING_ICON: \".tile-loading-icon\",\n            TILE_LOADING_ICON_ID: \"#loading-icon-\",\n            TILE_COLLAPSED: \".tile-collapsed\",\n            TILE_CLICKABLE: \".tile-clickable\",\n            TILES: \"ul.tiles\",\n            ACTIVITY: \".activity\",\n            ACTIVITY_NAME: \".activityname\",\n            INSTANCE_NAME: \".instancename\",\n            SPACER: \".spacer\",\n            SECTION_MOVEABLE: \".moveablesection\",\n            SECTION_ID: \"#section-\",\n            SECTION_TITLE: \".sectiontitle\",\n            SECTION_MAIN: \".section.main\",\n            SECTION_BUTTONS: \".sectionbuttons\",\n            CLOSE_SEC_BTN: \".closesectionbtn\",\n            HIDE_SEC0_BTN: \"#buttonhidesec0\",\n            SECTION_ZERO: \"#section-0\",\n            MOODLE_VIDEO: \".mediaplugin.mediaplugin_videojs\",\n            LAUNCH_STANDARD: '[data-action=\"launch-tiles-standard\"]',\n            MANUAL_COMPLETION: '[data-action=\"toggle-manual-completion\"]',\n            TOOLTIP: \"[data-toggle=tooltip]\",\n            MATHJAX_EQUATION: \".filter_mathjaxloader_equation\"\n        };\n        var ClassNames = {\n            SELECTED: \"selected\",\n            OPEN: \"open\",\n            CLOSED: \"closed\",\n            LAUNCH_CM_MODAL: \"launch-tiles-cm-modal\",\n            STATE_VISIBLE: 'state-visible', // This is a Snap theme class. Was added to make this format cooperate better with it.\n            HAS_OPEN_TILE: 'format-tiles-tile-open'\n        };\n\n        var Event = {\n            CLICK: \"click\",\n            KEYDOWN: \"keydown\",\n            SCROLL: \"scroll\"\n        };\n\n        var CSS = {\n            DISPLAY: \"display\",\n            Z_INDEX: \"z-index\",\n            HEIGHT: \"height\",\n            BG_COLOUR: \"background-color\"\n        };\n        var Keyboard = {\n            ESCAPE: 27,\n            TAB: 9,\n            RETURN: 13\n        };\n\n        const OVERLAY_ID = 'format_tiles_overlay';\n\n        /**\n         * If we have embedded video in section, stop it.\n         * Runs when section is closed.\n         * @param {number} section where the video is.\n         */\n        var stopVideoPlaying = function(section) {\n            var contentSection = $(Selector.SECTION_ID + section);\n\n            // First iframes (e.g. embedded YouTube).\n            contentSection.find(\"iframe\").each(function (index, iframe) {\n                iframe = $(iframe);\n                // Remove the src from the iframe but keep it in case the section is re-opened.\n                if (iframe.attr('src')) {\n                    iframe.attr('data-src', iframe.attr(\"src\"));\n                    iframe.attr('src', \"\");\n                }\n            });\n\n            // Then Moodle media player.\n            var mediaPlayers = contentSection.find(Selector.MOODLE_VIDEO);\n            if (mediaPlayers.length > 0) {\n                contentSection.html(\"\");\n            }\n        };\n\n        /**\n         * When JS navigation is being used, when a user un-selects a tile, we have to un-fade other tiles\n         * @param {number} sectionToFocus if we want to focus a tile after closing, which one\n         */\n        var cancelTileSelections = function (sectionToFocus) {\n            $(Selector.MOVEABLE_SECTION).each(function (index, sec) {\n                sec = $(sec);\n                if (sec.is(\":visible\")) {\n                    stopVideoPlaying(sec.attr(\"data-section\"));\n                    sec.slideUp().removeClass(ClassNames.STATE_VISIBLE); // Excludes section 0.\n                }\n            });\n            $(Selector.TILE).removeClass(ClassNames.SELECTED).css(CSS.Z_INDEX, \"\").css(CSS.BG_COLOUR, \"\");\n            $(\".section \" + ClassNames.SELECTED).removeClass(ClassNames.SELECTED).css(CSS.Z_INDEX, \"\");\n\n            if (sectionToFocus !== undefined && sectionToFocus !== 0) {\n                $(Selector.TILEID + sectionToFocus).focus();\n            }\n            $(Selector.TILE_LOADING_ICON).fadeOut(300, function () {\n                $(Selector.TILE_LOADING_ICON).html(\"\");\n            });\n            sectionIsOpen = false;\n            openTile = 0;\n            $(Selector.BODY).removeClass(ClassNames.HAS_OPEN_TILE);\n            overlay.fadeOut(300);\n        };\n\n        const overlay = $('#' + OVERLAY_ID);\n\n        /**\n         * Used where the user clicks the window overlay but we want the active click to be behind the\n         * overlay e.g. the tile or custom menu item behind it.  So we get the co-ordinates of the click\n         * on the overlay and then repeat the click at that spot ignoring the overlay\n         * @param {object} e the click event object\n         */\n        var clickItemBehind = function (e) {\n            var clickedItem = $(e.currentTarget);\n            if (clickedItem.attr(\"id\") === OVERLAY_ID) {\n                // We need to know what is behind the modal, so hide it for an instant to find out.\n                clickedItem.hide();\n                var BottomElement = $(document.elementFromPoint(e.clientX, e.clientY));\n                clickedItem.show();\n                if (BottomElement.hasClass(\"filterbutton\") || BottomElement.hasClass(\"list-group-item\")) {\n                    // Must ba a filter button clicked or a nav drawer item.\n                    BottomElement.click();\n                } else {\n                    // Must be a tile clicked.\n                    var clickedTile = BottomElement.closest(Selector.TILE);\n                    if (clickedTile) {\n                        clickedTile.click();\n                    }\n                }\n            }\n        };\n\n        /**\n         * Set the HTML for a course section to the correct div in the page\n         * @param {Object} contentArea the jquery object for the content area\n         * @param {String} content the HTML\n         * @param {String} js Any additional JS for the new HTML.\n         * @returns {boolean} success\n         */\n        var setCourseContentHTML = function (contentArea, content, js) {\n            if (content) {\n                contentArea.html(content);\n                Templates.runTemplateJS(js);\n\n                $(Selector.TILE_LOADING_ICON).fadeOut(300, function () {\n                    $(Selector.TILE_LOADING_ICON).html(\"\");\n                });\n\n                if (contentArea.attr(\"id\") !== Selector.SECTION_ZERO) {\n                    // Trap the tab key navigation in the content bearing section.\n                    // Until the user clicks the close button.\n                    // When user reaches last item, send them back to first.\n                    // And vice versa if going backwards.\n\n                    var activities = contentArea.find(Selector.ACTIVITY).not(Selector.SPACER);\n                    contentArea.on(Event.KEYDOWN, function (e) {\n                        if (e.keyCode === Keyboard.ESCAPE) {\n                            // Close open tile, and return focus to closed tile, for screen reader user.\n                            browserStorage.setLastVisitedSection(0);\n                            cancelTileSelections(0);\n                            $(Selector.TILEID + contentArea.attr('data-section')).focus();\n                        }\n                    });\n                    activities.on(Event.KEYDOWN, function (e) {\n                        if (e.keyCode === Keyboard.RETURN) {\n                            var toClick = $(e.currentTarget).find(\"a\");\n                            if (toClick.hasClass(ClassNames.LAUNCH_CM_MODAL)) {\n                                toClick.click();\n                            } else if (toClick.attr(\"href\") !== undefined) {\n                                window.location = toClick.attr(\"href\");\n                            }\n                        }\n                    });\n                    if (!isMobile) {\n                        activities.last().on(Event.KEYDOWN, function (e) {\n                            if (e.keyCode === Keyboard.TAB && !e.shiftKey\n                                    && $(e.relatedTarget).closest(Selector.SECTION_MAIN).attr(\"id\") !== contentArea.attr(\"id\")) {\n                                // RelatedTarget is the item we tabbed to.\n                                // If we reached here, the item we are on is not a member of the section we were in.\n                                // (I.e. we are trying to tab out of the bottom of section) so move tab back to first item instead.\n                                setTimeout(function () {\n                                    // Allow very short delay so we dont skip forward on the basis of our last key press.\n                                    contentArea.find(Selector.SECTION_TITLE).focus();\n                                    contentArea.find(Selector.SECTION_BUTTONS).css(\"top\", \"\");\n                                }, 200);\n                            }\n                        });\n                        contentArea.find(Selector.SECTION_TITLE).on(Event.KEYDOWN, function (e) {\n                            if (e.keyCode === Keyboard.TAB && e.shiftKey\n                                    && $(e.relatedTarget).closest(Selector.SECTION_MAIN).attr(\"id\") !== contentArea.attr(\"id\")) {\n                                // See explanation previous block.\n                                // Here we are trying to tab backwards out of the top of our section.\n                                // So take us to last item instead.\n                                setTimeout(function () {\n                                    activities.last().focus();\n                                }, 200);\n                            }\n                        });\n                    }\n                }\n\n                if (!isMobile) {\n                    // Activate tooltips for completion toggle and any \"restricted\" items in this content.\n                    setTimeout(function () {\n                        // Manual forms, auto icons and \"Restricted until ...\" etc.\n                        try {\n                            const tooltipItems = contentArea.find(\".badge-info\");\n                            if (tooltipItems.length > 0 && typeof tooltipItems.tooltip == 'function') {\n                                tooltipItems.tooltip();\n                            }\n                        } catch (err) {\n                            require([\"core/log\"], function(log) {\n                                log.debug(err);\n                            });\n                        }\n                    }, 500);\n                }\n\n                setTimeout(() => {\n                    // If subtile title is long, it overlaps background image.\n                    // Check heights to see if any subtile backgrounds need dimming.\n                    // Allow short delay for content to be added first.\n                    const MAX_HEIGHT = 110;\n                    contentArea.find(\n                        Selector.ACTIVITY_NAME).each((i, el) => {\n                        el = $(el);\n                        if (el.height() > MAX_HEIGHT) {\n                            el.closest(Selector.INSTANCE_NAME).addClass('opaque-bg');\n                        }\n                    });\n                }, 100);\n\n                applyMathJax(contentArea);\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * Find Mathjax equations in a content area and queue them for processing.\n         * @param {Object} contentArea the jquery object for the content area\n         */\n        const applyMathJax = function(contentArea) {\n            if (typeof window.MathJax !== \"undefined\") {\n                try {\n                    const mathJaxElems = contentArea.find(Selector.MATHJAX_EQUATION);\n                    if (mathJaxElems.length) {\n                        mathJaxElems.each((i, node) => {\n                            window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub, node]);\n                        });\n                    }\n                } catch (err) {\n                    require([\"core/log\"], function(log) {\n                        log.debug(err);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Expand a content containing section (e.g. on tile click)\n         * @param {object} contentArea\n         * @param {number} tileId to expand\n         */\n        var expandSection = function (contentArea, tileId) {\n            const tile = $(\"#tile-\" + tileId);\n            var expandAndScroll = function () {\n                // Scroll to the top of content bearing section\n                // we have to wait until possible reOrg and slide down totally before calling this, else co-ords are wrong.\n                var scrollTo = (tile.offset().top) - $(Selector.TILES).offset().top + HEADER_BAR_HEIGHT;\n                if (scrollTo === $(window).scrollTop) {\n                    // Scroll by at least one pixel otherwise z-index on selected tile is not changed.\n                    // Until mouse moves.\n                    scrollTo += 1;\n                }\n                contentArea.find(Selector.SECTION_TITLE).focus();\n                // If user tries to scroll during animation, stop animation.\n                var events = \"mousedown wheel DOMMouseScroll mousewheel keyup touchmove\";\n                const page = $(Selector.PAGE);\n                page.on(events, function () {\n                    page.stop();\n                });\n\n                page.animate({scrollTop: scrollTo}, \"slow\", \"swing\", function () {\n                    // Animation complete, remove stop handler.\n                    page.off(events, function () {\n                        page.stop();\n                    });\n                });\n                sectionIsOpen = true;\n                openTile = tileId;\n\n                // For users with screen readers, move focus to the first item within the tile.\n                contentArea.find(Selector.ACTIVITY).first().focus();\n\n                // If we have any iframes in the section which were previous emptied out, re-populate.\n                // This will happen if we have previously closed a section with videos in, and they were muted.\n                const iframes = contentArea.find(\"iframe\");\n                if (iframes.length > 0) {\n                    iframes.each(function (index, iframe) {\n                        iframe = $(iframe);\n                        // If iframe has no src, add it from data-src.\n                        if (iframe.attr('src') === '' && iframe.attr('data-src') !== undefined) {\n                            iframe.attr('src', iframe.attr(\"data-src\"));\n                        }\n                    });\n\n                    if (enableCompletion) {\n                        // Some iframes may load content set to mark as complete on view.\n                        // So maybe need to update tile completion info. E.g. applies with H5P filter.\n                        setTimeout(() => {\n                            $(document).trigger('format-tiles-completion-changed', {\n                                section: tileId\n                            });\n                        }, 1000);\n                    }\n                }\n            };\n\n            /**\n             * Make sure that the section close and edit buttons always appear at the top of the section on scroll\n             */\n            var holdSectionButtonPosition = function () {\n                var buttons = contentArea.find(Selector.SECTION_BUTTONS);\n                $(window).on(Event.SCROLL, function () {\n                    if (!scrollFuncLock && sectionIsOpen) {\n                        scrollFuncLock = true;\n                        buttons.fadeOut(300);\n                        setTimeout(function () {\n                            var windowTop = $(window).scrollTop();\n                            var desiredNewPositionInSection = (windowTop - contentArea.offset().top + 50);\n                            if (desiredNewPositionInSection > 0\n                                    && desiredNewPositionInSection < contentArea.outerHeight() - 100) {\n                                desiredNewPositionInSection = (windowTop - contentArea.offset().top + 50);\n                                buttons.css(\"top\", desiredNewPositionInSection);\n                            } else if (desiredNewPositionInSection < 0) {\n                                buttons.css(\"top\", 0);\n                            }\n                            if (windowTop > contentArea.offset().top + contentArea.outerHeight() - 50) {\n                                // We have scrolled down and content bottom has gone out of the top of window.\n                                buttons.css(\"top\", 0);\n                            } else if (contentArea.offset().top > windowTop + $(window).outerHeight()) {\n                                // We have scrolled up and  content bottom has gone out of the bottom of window.\n                                buttons.css(\"top\", 0);\n                            }\n                            buttons.fadeIn(300, function () {\n                                // Release lock on this function.\n                                scrollFuncLock = false;\n                            });\n                        }, 500);\n                    }\n                });\n            };\n\n            contentArea.addClass(ClassNames.STATE_VISIBLE);\n            overlay.fadeIn(300);\n            tile.addClass(ClassNames.SELECTED);\n            $(Selector.BODY).addClass(ClassNames.HAS_OPEN_TILE);\n            contentArea.slideDown(350, function () {\n                // Wait until we have finished sliding down before we work out where the top is for scroll.\n                expandAndScroll();\n                holdSectionButtonPosition();\n            });\n            openTile = tileId;\n        };\n\n        /**\n         * We find out what section is open, collapse them all, then run the re-org.\n         * Finally we re-open the section.\n         * This is to ensure that the content bearing section is on the row under the tile clicked.\n         * It is run at page load and again if window is re-sized etc.\n         * @param {boolean} delayBefore do we want a delay before we re-org.  This allows e.g. browser resizing to complete.\n         * @param {boolean} fitTilesToScreenWidth whether we need to resize the tiles window while tiles are closed.\n         * @returns {Promise}\n         */\n        var reOrgSections = function (delayBefore, fitTilesToScreenWidth) {\n            var dfd = new $.Deferred();\n            var openedSection = $(\".moveablesection:visible\");\n            var openedSectionNum = 0;\n            if (openedSection.length > 0) {\n                openedSectionNum = openedSection.attr(\"data-section\");\n                cancelTileSelections(0);\n            }\n            var reOrgFunc = function(delayBefore) {\n                tileFitter.runReOrg(delayBefore)\n                    .done(function(result) {\n                        if (openedSectionNum !== 0) {\n                            expandSection(openedSection, openedSectionNum);\n                        }\n                        dfd.resolve(result);\n                    })\n                    .fail(function(result) {\n                        if (openedSectionNum !== 0) {\n                            expandSection(openedSection, openedSectionNum);\n                        }\n                        dfd.reject(result);\n                    });\n            };\n\n            if (fitTilesToScreenWidth) {\n                setTimeout(function() {\n                    tileFitter.resizeTilesDivWidth(courseId).done(function() {\n                        reOrgFunc(false);\n                    }, delayBefore);\n                });\n\n            } else {\n                reOrgFunc(delayBefore);\n            }\n            return dfd.promise();\n        };\n\n        var failedLoadSectionNotify = function(sectionNum, failResult, contentArea) {\n            if (failResult) {\n                // Notify the user and invite them to refresh.  We did get a \"failResult\" from server,\n                // So it looks like we do have a connection and can launch this.\n                Notification.confirm(\n                    stringStore.sectionerrortitle,\n                    stringStore.sectionerrorstring,\n                    stringStore.refresh,\n                    stringStore.cancel,\n                    function () {\n                        window.location.reload();\n                    },\n                    null\n                );\n                contentArea.html(\"\"); // Clear loading icon.\n            } else {\n                // It looks like we may not have a connection so we can't launch notifications.\n                // We can warn the user like this instead.\n                setCourseContentHTML(contentArea, \"<p>\" + stringStore.noconnectionerror + \"</p>\");\n                setTimeout(function () {\n                    expandSection(contentArea, sectionNum);\n                }, 500);\n            }\n            require([\"core/log\"], function(log) {\n                log.debug(failResult);\n            });\n            throw new Error(\"Not successful retrieving tile content by AJAX for section \" + sectionNum);\n        };\n\n        /**\n         * For a given section, get the content from the server, add it to the store and maybe UI and maybe show it\n         * @param {number} courseId the id for the affected course\n         * @param {number} sectionNum the section number we are wanting to populate\n         * @param {boolean} setJsUsedSession Sets format_tiles_jssuccessfullyused session flag.\n         * @return {Promise} promise to resolve when the ajax call returns.\n         */\n        var getSectionContentFromServer = function (courseId, sectionNum, setJsUsedSession) {\n            const args = {\n                courseid: courseId,\n                sectionid: sectionNum,\n                setjsusedsession: setJsUsedSession ?? true,\n            };\n            return Fragment.loadFragment('format_tiles', 'get_single_section_page', courseContextId, args);\n        };\n\n        /**\n         * If the user had section zero collapsed in this course previously, collapse it now\n         */\n        var setSectionZeroFromUserPref = function () {\n            var buttonHideSecZero = $(Selector.HIDE_SEC0_BTN);\n            var sectionZero = $(Selector.SECTION_ZERO);\n            if (browserStorage.storageEnabledLocal()) {\n                // Collapse section zero if user had it collapsed before - relies on local storage so only if enabled.\n                if (browserStorage.getSecZeroCollapseStatus() === true) {\n                    sectionZero.slideUp(0);\n                    buttonHideSecZero.addClass(ClassNames.CLOSED).removeClass(ClassNames.OPEN); // Button image.\n                } else {\n                    sectionZero.slideDown(300);\n                    buttonHideSecZero.addClass(ClassNames.OPEN).removeClass(ClassNames.CLOSED); // Button image.\n                }\n            } else {\n                // Storage not available so we dont know if sec zero was previously collapsed - expand it.\n                buttonHideSecZero.addClass(ClassNames.OPEN).removeClass(ClassNames.CLOSED);\n                sectionZero.slideDown(300);\n            }\n        };\n\n        /**\n         * To be called when a tile is clicked. Get content from server or storage and display or store it.\n         * @param {number} courseId courseId the id of this course.\n         * @param {object} thisTile jquery the tile object clicked.\n         * @param {number} dataSection the id number of the tile.\n         */\n        var populateAndExpandSection = function(courseId, thisTile, dataSection) {\n            $(Selector.TILE).removeClass(ClassNames.SELECTED);\n            openTile = dataSection;\n            // Then close all open secs.\n            // Timed to finish in 200 so that it completes well before the opening next.\n            $(Selector.MOVEABLE_SECTION).each(function (index, sec) {\n                sec = $(sec);\n                if (sec.is(\":visible\")) {\n                    stopVideoPlaying(sec.attr(\"data-section\"));\n                    sec.slideUp(200).removeClass(ClassNames.STATE_VISIBLE); // Excludes section 0.\n                }\n            });\n            // Log the fact we viewed the section.\n            ajax.call([{\n                methodname: \"format_tiles_log_tile_click\", args: {\n                    courseid: courseId,\n                    sectionid: dataSection\n                }\n            }])[0].fail(Notification.exception);\n            // Get the content - use locally stored content first if available.\n            var relatedContentArea = $(Selector.SECTION_ID + dataSection);\n            if (relatedContentArea.find(Selector.ACTIVITY).length > 0) {\n                // There is already some content on the screen so display immediately.\n                expandSection(relatedContentArea, dataSection);\n\n                // Still contact the server in case content has changed (e.g. restrictions now satisfied).\n                getSectionContentFromServer(courseId, dataSection).done(function (html, js) {\n                    setCourseContentHTML(relatedContentArea, html, js);\n                });\n            } else {\n                relatedContentArea.html(loadingIconHtml);\n                // Get from server.\n                getSectionContentFromServer(courseId, dataSection).done(function (html, js) {\n                    setCourseContentHTML(relatedContentArea, html, js);\n                    expandSection(relatedContentArea, dataSection);\n                }).fail(function (failResult) {\n                    failedLoadSectionNotify(dataSection, failResult, relatedContentArea);\n                    cancelTileSelections(dataSection);\n                });\n            }\n            browserStorage.setLastVisitedSection(dataSection);\n        };\n\n        return {\n            init: function (\n                courseIdInit,\n                courseContextIdInit,\n                useJavascriptNav, // Set by site admin see settings.php.\n                isMobileInit,\n                sectionNum,\n                useFilterButtons,\n                assumeDataStoreConsent, // Set by site admin see settings.php.\n                reopenLastSectionInit, // Set by site admin see settings.php.\n                userId,\n                fitTilesToWidth,\n                enableCompletionInit,\n            ) {\n                courseId = courseIdInit;\n                courseContextId = courseContextIdInit;\n                isMobile = isMobileInit;\n                // Some args are strings or ints but we prefer bool.  Change to bool now as they are passed on elsewhere.\n                reopenLastVisitedSection = reopenLastSectionInit === \"1\";\n                useFilterButtons = useFilterButtons === 1;\n                assumeDataStoreConsent = assumeDataStoreConsent === \"1\";\n                enableCompletion = enableCompletionInit === \"1\";\n                 // We want to initialise the browser storage JS module for storing user settings.\n                browserStorage.init(\n                    courseId,\n                    false,\n                    sectionNum,\n                    assumeDataStoreConsent,\n                    userId\n                );\n                $(document).ready(function () {\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n\n                    // If we are being told to launch a section number from the URL, use that.\n                    if (sectionNum !== 0) {\n                        openTile = sectionNum;\n                    } else {\n                        // Don't use the URL param - check local storage instead.\n                        if (reopenLastVisitedSection && browserStorage.storageEnabledLocal) {\n                            openTile = browserStorage.getLastVisitedSection();\n                            // If user is not on mobile, retrieve last visited section id from browser storage (if present).\n                            // And click it.\n                        }\n                    }\n                    if (openTile !== 0) {\n                        tileFitter.init(courseId, openTile, fitTilesToWidth, false);\n                    } else {\n                        // Set focus to the first tile (not section zero).\n                        $(Selector.TILEID + \"1\").focus();\n                        tileFitter.init(courseId, null, fitTilesToWidth, false);\n                    }\n                    var windowWidth = $(window).outerWidth();\n\n                    if (useJavascriptNav) {\n                        // User is not editing but is usingJS nav to view.\n\n                         // On a tile click, decide what to do an do it.\n                         // (Collapse if already expanded, or expand it and fill with content).\n                        pageContent.on(Event.CLICK, Selector.TILE_CLICKABLE, function (e) {\n                            // Prevent the link being followed to reload the PHP page as we are using JS instead.\n                            if (!useJavascriptNav) {\n                                return;\n                            }\n                            e.preventDefault();\n                            // If other tiles have loading icons, fade them out (on the tile not the content sec).\n                            $(Selector.TILE_LOADING_ICON).fadeOut(300, function () {\n                                $(Selector.TILE_LOADING_ICON).html();\n                            });\n                            var thisTile = $(e.currentTarget).closest(Selector.TILE);\n                            var dataSection = parseInt(thisTile.attr(\"data-section\"));\n                            if (thisTile.hasClass(ClassNames.SELECTED)) {\n                                // This tile is already expanded so collapse it.\n                                cancelTileSelections(dataSection);\n                                browserStorage.setLastVisitedSection(0);\n                                overlay.fadeOut(300);\n                            } else {\n                                populateAndExpandSection(courseId, thisTile, dataSection);\n                            }\n                        });\n\n                        overlay.on(Event.CLICK, function(e) {\n                            cancelTileSelections(0);\n                            browserStorage.setLastVisitedSection(0);\n                            clickItemBehind(e);\n                        });\n\n                        // When window is re-sized, content sections under the tiles may be in wrong place.\n                        // So remove them and re-initialise them.\n                        // Collapse the selected section before doing this.\n                        // Otherwise the re-organisation won't work as the tiles' flow will be out when they are analysed.\n                        $(window).on(\"resize\", function () {\n                            // On iOS resize events are triggered often on scroll because the address bar hides itself.\n                            // Avoid this using windowWidth here.\n                            if (resizeLocked || windowWidth === $(window).outerWidth()) {\n                                return;\n                            }\n                            resizeLocked = true;\n\n                            // We wait for a short time before doing anything, as user may still be dragging window size change.\n                            // We don't want to react to say 20 resize events happening over a single drag.\n                            setTimeout(function() {\n                                // First assume that we are going to resize, but we have checks to make below.\n                                var resizeRequired = true;\n\n                                // If we have an iframe in the section in fullscreen, ignore this resize event.\n                                // It was probably caused when user pressed the full screen button.\n                                // This could be a Moodle media player div, or a YouTube embed or other.\n                                var openContentSection = $(\".moveablesection:visible\");\n                                if (openContentSection.length !== 0) {\n                                    var iframes = openContentSection.find(\"iframe\");\n                                    if (iframes.length !== 0) {\n                                        iframes.each(function (index, player) {\n                                            player = $(player);\n                                            if (player.outerWidth() > openContentSection.outerWidth()) {\n                                                // Video is present and playing full screen so don't react to resize event.\n                                                resizeRequired = false;\n                                            }\n                                        });\n                                    }\n                                }\n                                if (resizeRequired) {\n                                    // Set global for comparison next time.\n                                    windowWidth = $(window).outerWidth();\n                                    reOrgSections(true, fitTilesToWidth);\n                                }\n                                resizeLocked = false;\n                            }, 600);\n                        });\n\n                        // When user clicks to close a section using cross at top right in section.\n                        pageContent.on(Event.CLICK, Selector.CLOSE_SEC_BTN, function (e) {\n                            cancelTileSelections($(e.currentTarget).attr(\"data-section\"));\n                        });\n\n                        setSectionZeroFromUserPref();\n                        // Most filter button related JS is in filter_buttons.js module which is required below.\n\n                    }\n\n                    // If this event is triggered, user has updated a completion check box.\n                    // We need to retrieve section content from server in case availability of items has changed.\n                    $(document).on('format-tiles-completion-changed', function(e, data) {\n                        const allSectionNums = $(Selector.TILE).not(Selector.SPACER).map((i, t) => {\n                            return parseInt($(t).attr('data-section'));\n                        }).toArray();\n                        // Need to include sec zero as may have completion tracked items.\n                        allSectionNums.push(0);\n                        const isSingleSectionPage = $('ul#single_section_tiles').length > 0;\n\n                        getSectionContentFromServer(courseId, data.section, isSingleSectionPage).done(function (html, js) {\n                            setCourseContentHTML($(Selector.SECTION_ID + data.section), html, js);\n                        }).catch(err => {\n                            require([\"core/log\"], function(log) {\n                                log.debug(err);\n                            });\n                        });\n\n                        ajax.call([{\n                            methodname: \"format_tiles_get_section_information\",\n                            args: {\n                                courseid: courseId,\n                                sectionnums: allSectionNums\n                            }\n                        }])[0].done((response) => {\n                            require([\"format_tiles/completion\"], function (completion) {\n                                completion.updateSectionsInfo(\n                                    response.sections, response.overall.complete, response.overall.outof\n                                );\n                            });\n                        }).catch(err => {\n                            require([\"core/log\"], function(log) {\n                                log.debug(err);\n                            });\n                        });\n                    });\n\n                    if (enableCompletion) {\n                        // We use pageContent for listener here, as completion button is replaced by core JS when it's clicked.\n                        // We wait half a second to enable the completion change to be registered first.\n                        pageContent.on(Event.CLICK, Selector.MANUAL_COMPLETION, function(e) {\n                            const currentTarget = $(e.currentTarget);\n                            const sectionNum = currentTarget.closest(Selector.SECTION_MAIN).attr(\"data-section\");\n                            const cmid = currentTarget.attr(\"data-cmid\");\n                            require([\"format_tiles/completion\"], function (completion) {\n                                setTimeout(() => {\n                                    completion.triggerCompletionChangedEvent(\n                                        sectionNum ? parseInt(sectionNum) : 0,\n                                        cmid ? parseInt(cmid) : 0\n                                    );\n                                }, 500);\n                            });\n                        });\n                    }\n\n                    const sectionZero = $(Selector.SECTION_ZERO);\n\n                    // When the user presses the button to collapse or expand Section zero (section at the top of the course).\n                    pageContent.on(Event.CLICK, Selector.HIDE_SEC0_BTN, function (e) {\n                        if (sectionZero.css(CSS.DISPLAY) === \"none\") {\n                            // Sec zero is collapsed so expand it on user click.\n                            sectionZero.slideDown(250);\n                            $(e.currentTarget).addClass(ClassNames.OPEN).removeClass(ClassNames.CLOSED);\n                            browserStorage.setSecZeroCollapseStatus(\"collapsed\");\n                        } else {\n                            // Sec zero is expanded so collapse it on user click.\n                            sectionZero.slideUp(250);\n                            $(e.currentTarget).addClass(ClassNames.CLOSED).removeClass(ClassNames.OPEN);\n                            browserStorage.setSecZeroCollapseStatus(\"expanded\");\n                        }\n                    });\n\n                    if (useFilterButtons) {\n                        require([\"format_tiles/filter_buttons\"], function (filterButtons) {\n                            filterButtons.init(courseId, browserStorage.storageEnabledLocal);\n                        });\n                        if (useJavascriptNav) {\n                            pageContent.on(Event.CLICK, Selector.FILTER_BUTTON, function () {\n                                cancelTileSelections(0);\n                                reOrgSections(true, false);\n                            });\n                        }\n\n                    }\n                    // If theme is displaying the .tiles_coursenav class items, show items with this class.\n                    // They will be hidden otherwise.\n                    // They are hidden when initially rendered from PHP as we only want them shown if browser supports JS.\n                    // See lib.php extend_course_navigation.\n                    $(\".tiles_coursenav\").removeClass(\"hidden\");\n\n                    // Render the loading icon and store its HTML globally so that we can use it where needed later.\n                    Templates.render(\"format_tiles/loading\", {}).done(function (html) {\n                        loadingIconHtml = html;\n                    });\n\n                     // Get these strings now, in case we need them.\n                    // E.g. after we lose connection and cannot display content on a user tile click.\n                    var stringKeys = [\n                        {key: \"sectionerrortitle\", component: \"format_tiles\"},\n                        {key: \"sectionerrorstring\", component: \"format_tiles\"},\n                        {key: \"refresh\"},\n                        {key: \"cancel\", component: \"moodle\"},\n                        {key: \"noconnectionerror\", component: \"format_tiles\"},\n                        {key: \"show\"},\n                        {key: \"hide\"},\n                        {key: \"other\", component: \"format_tiles\"}\n                    ];\n                    str.get_strings(stringKeys).done(function (s) {\n                        s.forEach(function(str, index) {\n                            if (str) {\n                                stringStore[stringKeys[index].key] = str;\n                            } else {\n                                stringStore[stringKeys[index].key] = 'Error.';\n                                require([\"core/log\"], function(log) {\n                                    log.debug(`Format tiles get_strings error ${index}`);\n                                    log.debug(s);\n                                });\n                            }\n                        });\n                    })\n                    .fail(function(err) {\n                        require([\"core/log\"], function(log) {\n                            log.debug(err);\n                        });\n                    });\n\n                    // If a mobile user clicks an embedded video activity, we don't show them a modal.\n                    // It won't work well. Instead we direct them to the original site e.g. YouTube.\n                    if (isMobile) {\n                        pageContent.on(Event.CLICK, Selector.ACTIVITY + \".video a\", function(e) {\n                            var target = $(e.currentTarget);\n                            var url = target.closest(Selector.ACTIVITY).attr(\"data-url-secondary\");\n                            if (url !== undefined) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                var cm = target.closest(Selector.ACTIVITY);\n                                ajax.call([{\n                                    methodname: \"format_tiles_log_mod_view\", args: {\n                                        courseid: courseId,\n                                        cmid: cm.attr(\"data-cmid\")\n                                    }\n                                }])[0].done(function () {\n                                    window.location = url;\n                                });\n                            }\n                        });\n                    } else {\n                        // If user is NOT on mobile device.\n\n                        // If return is pressed while an item is in focus, click the item.\n                        // This is to make the tiles keyboard navigable for users using screen readers.\n                        // User tabbing between tiles is handled by tabindex in the HTML.\n                        // Once the tile is clicked, the expand tile function will move focus to the first content item.\n                        // On escape key, we clear all selections and collapse tiles (handled above not here).\n                        $(Selector.TILE).on(Event.KEYDOWN, function (e) {\n                            if (e.keyCode === Keyboard.RETURN) { // Return key pressed.\n                                $(e.currentTarget).click();\n                            }\n                        });\n\n                        // Move focus to the first tile in the course (not sec zero contents if present).\n                        // $(\"ul.tiles .tile\").first().focus();\n                    }\n                });\n            }\n        };\n    }\n);"],"names":["define","$","Templates","ajax","browserStorage","Notification","str","tileFitter","Fragment","isMobile","loadingIconHtml","courseId","courseContextId","enableCompletion","stringStore","scrollFuncLock","sectionIsOpen","reopenLastVisitedSection","resizeLocked","openTile","Selector","ClassNames","Event","CSS","Keyboard","stopVideoPlaying","section","contentSection","find","each","index","iframe","attr","length","html","cancelTileSelections","sectionToFocus","sec","is","slideUp","removeClass","css","undefined","focus","fadeOut","overlay","setCourseContentHTML","contentArea","content","js","runTemplateJS","activities","not","on","e","keyCode","setLastVisitedSection","toClick","currentTarget","hasClass","click","window","location","last","shiftKey","relatedTarget","closest","setTimeout","tooltipItems","tooltip","err","require","log","debug","i","el","height","addClass","applyMathJax","MathJax","mathJaxElems","node","Hub","Queue","expandSection","tileId","tile","fadeIn","slideDown","buttons","scrollTo","offset","top","scrollTop","events","page","stop","animate","off","first","iframes","document","trigger","expandAndScroll","windowTop","desiredNewPositionInSection","outerHeight","reOrgSections","delayBefore","fitTilesToScreenWidth","dfd","Deferred","openedSection","openedSectionNum","reOrgFunc","runReOrg","done","result","resolve","fail","reject","resizeTilesDivWidth","promise","getSectionContentFromServer","sectionNum","setJsUsedSession","args","courseid","sectionid","setjsusedsession","loadFragment","populateAndExpandSection","thisTile","dataSection","call","methodname","exception","relatedContentArea","failResult","confirm","sectionerrortitle","sectionerrorstring","refresh","cancel","reload","noconnectionerror","Error","failedLoadSectionNotify","init","courseIdInit","courseContextIdInit","useJavascriptNav","isMobileInit","useFilterButtons","assumeDataStoreConsent","reopenLastSectionInit","userId","fitTilesToWidth","enableCompletionInit","ready","pageContent","storageEnabledLocal","getLastVisitedSection","windowWidth","outerWidth","preventDefault","parseInt","clickedItem","hide","BottomElement","elementFromPoint","clientX","clientY","show","clickedTile","clickItemBehind","resizeRequired","openContentSection","player","buttonHideSecZero","sectionZero","getSecZeroCollapseStatus","setSectionZeroFromUserPref","data","allSectionNums","map","t","toArray","push","isSingleSectionPage","catch","sectionnums","response","completion","updateSectionsInfo","sections","overall","complete","outof","cmid","triggerCompletionChangedEvent","setSecZeroCollapseStatus","filterButtons","render","stringKeys","key","component","get_strings","s","forEach","target","url","stopPropagation","cm"],"mappings":"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"}